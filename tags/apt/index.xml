<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apt on MingguiLu - Linux</title>
    <link>http://linux.mingguilu.com/tags/apt/</link>
    <description>Recent content in Apt on MingguiLu - Linux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 30 Dec 2016 09:09:19 +0800</lastBuildDate>
    <atom:link href="http://linux.mingguilu.com/tags/apt/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Linux软件安装与维护</title>
      <link>http://linux.mingguilu.com/2016/12/30/linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BB%B4%E6%8A%A4</link>
      <pubDate>Fri, 30 Dec 2016 09:09:19 +0800</pubDate>
      
      <guid>http://linux.mingguilu.com/2016/12/30/linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BB%B4%E6%8A%A4</guid>
      <description>

&lt;h3 id=&#34;1-使用软件源码包:9667daa69c84529bfb2ccc8da43c9833&#34;&gt;1. 使用软件源码包&lt;/h3&gt;

&lt;h3 id=&#34;2-debian-ubuntu:9667daa69c84529bfb2ccc8da43c9833&#34;&gt;2. Debian/Ubuntu&lt;/h3&gt;

&lt;p&gt;Debian系Linux发行版的软件包格式为deb&lt;/p&gt;

&lt;h4 id=&#34;2-1-dpkg:9667daa69c84529bfb2ccc8da43c9833&#34;&gt;2.1 dpkg&lt;/h4&gt;

&lt;p&gt;dpkg的是基于Debian系统的一个低级包管理器。它可以安装，删除，提供有关资料，以及建立*.deb包，但它不能自动下载并安装它们相应的依赖包。&lt;/p&gt;

&lt;p&gt;查看帮助&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看指定软件包的信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg -I 下载/Software/vivaldi-stable_1.6.689.46-1_amd64.deb

#以Vivaldi浏览器deb安装包为例
##必须使用软件包的完整名称
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;列出指定软件包里的文件目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg -c 下载/Software/vivaldi-stable_1.6.689.46-1_amd64.deb

#必须使用软件包的完整名称
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装deb软件包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg -i vivaldi-stable_1.6.689.46-1_amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;列出所有已安装的软件包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查询是否已安装指定软件包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg -l vivaldi-stable

#即可看到软件名称、版本、架构、描述信息
#注意软件名称必须正确，比如查询“vivaldi”就会提示“dpkg-query: 没有找到与 vivaldi 相匹配的软件包”
#当不能确认完整的软件包名称，可以再输入“vivaldi”后，按“Tab”键，会列出所有相关包名称
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看已安装的软件包的详细信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg -s vivaldi-stable

#同上，必须指定软件名称“vivaldi-stable”，而不能用原始的软件包名称“vivaldi-stable_1.6.689.46-1_amd64.deb”
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;列出指定软件包安装后的所有文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg -L vivaldi-stable

#同上
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;卸载软件包（保留配置文件）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg -r vivaldi-stable

#同上，必须指定软件名称“vivaldi-stable”，而不能用原始的软件包名称“vivaldi-stable_1.6.689.46-1_amd64.deb”
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;卸载软件包（删除配置文件）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg -p vivaldi-stable

#有些软件包卸载后还会遗留一些配置文件，使用`-p`就像在windows上卸载软件时勾选上“同时清除用户配置文件”
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装指定目录及其子目录下所有的“.deb”包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg -R --install debpackages/

# -R 参数表示递归，指定目录和子目录下所有的.deb包都将被安装
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;释放软件包，但不配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg --unpack vivaldi-stable_1.6.689.46-1_amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重新配置软件包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg --configure
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;替换软件包信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg --update-avail
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;清除包的当前可用信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg --clear-avail
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;丢弃所有不能安装和不可用软件包的信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg --forget-old-unavail
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示版本&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dpkg --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-2-apt-cache-apt-get:9667daa69c84529bfb2ccc8da43c9833&#34;&gt;2.2 apt-cache、apt-get&lt;/h4&gt;

&lt;h5 id=&#34;2-2-1-apt-cache:9667daa69c84529bfb2ccc8da43c9833&#34;&gt;2.2.1 apt-cache&lt;/h5&gt;

&lt;p&gt;apt-cache是Linux下的apt软件包管理工具，使用它能查询到apt的二进制软件包缓存文件,结合一些参数使用能查寻到软件包信息和软件包依赖关系等&lt;/p&gt;

&lt;p&gt;列出所有软件包的名称&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-cache pkgnames
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;列出所有以指定字符开头的软件包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-cache pkgnames apache2

#以“apache2”为例
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;列出包含指定关键字的软件包和简介&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-cache search apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以便于阅读的格式介绍该软件包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-cache show apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查询软件包的依赖关系&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-cache showpkg apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;统计全部软件包的信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-cache stats
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;2-2-2-apt-get:9667daa69c84529bfb2ccc8da43c9833&#34;&gt;2.2.2 apt-get&lt;/h5&gt;

&lt;p&gt;apt-get是Debian及其衍生版的高级包管理器，并提供命令行方式来从多个来源检索和安装软件包，其中包括解决依赖性。和dpkg不同的是，apt-get不是直接基于.deb文件工作，而是基于软件包的正确名称。&lt;/p&gt;

&lt;p&gt;更新软件源（/etc/apt/source.list）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;升级已安装的所有软件包（不管依赖性，不添加包，也不删除包）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;升级已安装的所有软件包（根据依赖关系的变化，添加包或删除包）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get dist-upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装指定的软件包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install apache2

#以“apache2”为例
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装多个软件包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install apache2 mysql-server php5

#同时安装“apache2”、&amp;quot;mysql-server&amp;quot;、&amp;quot;php5&amp;quot;，并解决依赖性
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装包含指定字符串的软件包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install &#39;*name*&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装软件包但不升级&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install packageName --no-upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装指定名称和版本的软件包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install apache2=2.4.18-2ubuntu3.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;卸载软件包但不清除配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get remove apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;卸载软件包同时清除配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get purge apaceh2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get remove --purge apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;清理本地软件仓库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;仅下载指定软件源码包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get --download-only source apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下载指定软件包并解包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get source apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同时下载、解包并编译软件包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get --compile source apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;仅下载不安装软件包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get download apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看软件包版本变更日志&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get changelog apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;检查是否有损坏的依赖关系&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get check
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建立指定软件包的编译环境&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get build-dep apache2

#为手工编译软件apache2,提前把编译过程中需要用的软件包先安装配置好
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将已经删除了的软件包的.deb安装文件从硬盘中删除掉&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get autoclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将已经安装了的所有软件包的.deb包从硬盘中删除掉&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;删除为了满足其他软件包的依赖而安装的，但现在不再需要的软件包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get autoremove apache2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>